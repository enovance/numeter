#!/usr/bin/env python
#
# This plugin monitor the number of plugins / hosts / wsp not updated or deleted
#
# E.g.
#    ln -s /usr/share/munin/plugins/numeter_storage_old_datas /etc/munin/plugins/numeter_storage_old_datas
#
# Magic markers
#%# capabilities=autoconf
#%# family=auto
#
#  [numeter_storage_old_datas]
#  env.redisHost
#  env.redisPort
#  env.redisTimeout
#  env.redisDb
#  env.redisPassword

import sys
import os
import json

try:
    from numeter.storage import Storage
except ImportError:
    IMPORT_STORAGE = False
else:
    IMPORT_STORAGE = True

try:
    from numeter.redis import RedisConnect
except ImportError:
    IMPORT_REDIS = False
else:
    IMPORT_REDIS = True

def print_config():
    print 'graph_title Numeter redis %s' % type
    print 'graph_info This graph shows redis size in MB and number of keys'
    print 'graph_vlabel Size in MB / Num'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category numeter'
    print_storage_configs()

def load_params():
    global REDIS_HOST
    global REDIS_PORT
    global REDIS_TIMEOUT
    global REDIS_DB
    global REDIS_PASSWORD

    REDIS_HOST      = os.getenv('redisHost', '127.0.0.1')
    REDIS_PORT      = os.getenv('redisPort', 6379)
    REDIS_TIMEOUT   = os.getenv('redisTimeout', 10)
    REDIS_DB        = os.getenv('redisDb', 2)
    REDIS_PASSWORD  = os.getenv('redisPassword', None)

def get_deleted_hosts():
    redis_connexion = RedisConnect(host=REDIS_HOST,
                      port=REDIS_PORT,
                      socket_timeout=REDIS_TIMEOUT,
                      db=REDIS_DB,
                      password=REDIS_PASSWORD)

    if redis_connexion._error:
        self._logger.critical("Redis server connexion ERROR - "
        + "Check server access or the password")
        exit(1)
    try:
        return redis_connexion.redis_hlen('DELETED_HOSTS')
    except:
        return None

def get_deleted_plugins():
    redis_connexion = RedisConnect(host=REDIS_HOST,
                      port=REDIS_PORT,
                      socket_timeout=REDIS_TIMEOUT,
                      db=REDIS_DB,
                      password=REDIS_PASSWORD)

    if redis_connexion._error:
        self._logger.critical("Redis server connexion ERROR - "
        + "Check server access or the password")
        exit(1)
    try:
        return redis_connexion.redis_hlen('DELETED_PLUGIN')
    except:
        return None

def get_old_wsps():
    redis_connexion = RedisConnect(host=REDIS_HOST,
                      port=REDIS_PORT,
                      socket_timeout=REDIS_TIMEOUT,
                      db=REDIS_DB,
                      password=REDIS_PASSWORD)

    if redis_connexion._error:
        self._logger.critical("Redis server connexion ERROR - "
        + "Check server access or the password")
        exit(1)
    return len(json.loads(redis_connexion.redis_get('OLD_WSP')))


def print_storage_values():
    # Deleted hosts
    print_values('deleted_hosts', get_deleted_hosts())
    # Deleted plugins
    print_values('deleted_plugins', get_deleted_plugins())
    # OLD_WSPS
    print_values('old_wsps', get_old_wsps())

def print_storage_configs():
    # Deleted hosts
    name = 'deleted_hosts'
    print '%s.label %s' % (name,'Deleted hosts')
    print '%s.draw LINE' % name
    print '%s.color %s' % (name,'#909122')
    # Deleted plugins
    name = 'deleted_plugins'
    print '%s.label %s' % (name,'Deleted plugins')
    print '%s.draw LINE' % name
    print '%s.color %s' % (name,'#67809e')
    # OLD_WSPS
    name = 'old_wsps'
    print '%s.label %s' % (name,'Old wsps')
    print '%s.draw LINE' % name
    print '%s.color %s' % (name,'#53b73a')



def print_values(name, value):
    if value is None:
        value = 'U'
    print "%s.value %s" % (name, value)

if __name__ == '__main__':
    ARGV = sys.argv[:]
    if len(ARGV) > 1:
        if ARGV[1] == 'config':
            print_config()
        elif ARGV[1] == 'autoconf':
            if not (IMPORT_REDIS and IMPORT_STORAGE):
                print 'no (failed import redis or storage module)'
                sys.exit(0)
            print 'yes'

    elif IMPORT_REDIS and IMPORT_STORAGE:
        load_params()
        print_storage_values()

